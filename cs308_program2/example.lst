Microsoft (R) Macro Assembler Version 10.00.30319.01	    10/24/16 17:45:19
example.asm						     Page 1 - 1


				; Example assembly language program -- adds two numbers
				; Author:  R. Detmer
				; Date:    1/2008

				.586
				.MODEL FLAT

				INCLUDE io.h            ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096

 00000000			.DATA
 00000000 00000000		number1		DWORD	?
 00000004 0000000A		number2		DWORD	10
 00000008 45 6E 74 65 72	prompt1		BYTE    "Enter number of primes to generate: ", 0
	   20 6E 75 6D 62
	   65 72 20 6F 66
	   20 70 72 69 6D
	   65 73 20 74 6F
	   20 67 65 6E 65
	   72 61 74 65 3A
	   20 00
 0000002D 4E 75 6D 62 65	errorLbl	BYTE	"Number above 100 or below 1. Please try again ", 0
	   72 20 61 62 6F
	   76 65 20 31 30
	   30 20 6F 72 20
	   62 65 6C 6F 77
	   20 31 2E 20 50
	   6C 65 61 73 65
	   20 74 72 79 20
	   61 67 61 69 6E
	   20 00
 0000005C 54 68 65 20 70	primesLbl	BYTE	"The primes are ", 0
	   72 69 6D 65 73
	   20 61 72 65 20
	   00
 0000006C 20 00			emptyLbl	BYTE	" ",0
 0000006E  00000028 [		string		BYTE	40 DUP(0)
	    00
	   ]
 00000096  00000014 [		primes		BYTE	20 DUP(?), 0
	    00
	   ] 00
 000000AB  00002710 [		array		BYTE	10000	DUP(0)
	    00
	   ]

 00000000			.CODE
 00000000			_MainProc PROC
 00000000			startCheck:
				    input   prompt1, string, 40     ; read ASCII characters
				    atod    string					; convert to integer
 0000002D  A3 00000000 R	    mov     number1, eax			; store in memory
 00000032  83 3D 00000000 R		cmp		number1, 100			; compare number to the limit 100
	   64
 00000039  7F 0B			jg		greaterThan				; if greater than 100 jump to error message
 0000003B  83 3D 00000000 R		cmp		number1, 1
	   01
 00000042  7C 02			jl		greaterThan
 00000044  EB 1B			jmp		endCheck				; otherwise continue with procedure

				; error procedure
 00000046			greaterThan:
					output	errorLbl, emptyLbl				; display error message (i think?)
 0000005F  EB 9F			jmp		startCheck					; loop back to start and try again

				; continue 
 00000061			endCheck:
 00000061  E8 00000075			call	GenPrimes					; GenPrimes(int number1)

 00000066  8D 15 000000AB R		lea		edx, array					; load the array address into EDX
 0000006C  42				inc		edx    					    ; move EDX to the third index of the array
 0000006D  BB 00000000			mov		ebx, 0						; counter for total primes
 00000072  B9 00000001			mov		ecx, 1						; counter for total number
					output	primesLbl, emptyLbl			; print the initial message

 00000090				whileLoop:
 00000090  41				inc ecx								; ++i
 00000091  42				inc edx
 00000092  3B 1D 00000000 R		cmp ebx, number1 					; while (i < number)
 00000098  7D 3B			jge endPrintLoop					; if (i>= number) break

 0000009A				primeCheck:
 0000009A  80 3A 00			cmp BYTE PTR [edx], 0
 0000009D  74 02			je  printPrimes

 0000009F  EB EF			jmp whileLoop
					
 000000A1				printPrimes:
 000000A1  43				inc ebx
					dtoa string, ecx
					output  emptyLbl, string			; output label and sum

 000000D3  EB BB			jmp whileLoop

 000000D5				endPrintLoop:

 000000D5  B8 00000000		    mov     eax, 0						; exit with return code 0
 000000DA  C3			    ret
 000000DB			_MainProc ENDP







				                       
 000000DB			GenPrimes PROC
					; move starting values into counters
 000000DB  BB 00000002		    mov     ebx, 2						; move 2 into 1st counter
 000000E0  B9 00000002		    mov     ecx, 2						; move 2 into 2nd counter

 000000E5			loop1:
				    ; outer loop
 000000E5  81 FB 00002710	    cmp     ebx, 10000					; number1
 000000EB  7D 26		    jge     quit						; if greater than or equal to 10,000 quit the program

 000000ED				loop2:
				    ; calculate index product 
 000000ED  8B C3		   mov     eax, ebx				    ; move counter 1 into register
 000000EF  F7 E1		    mul     ecx						    ; multiply by value in 2nd counter and store in eax
 000000F1  3D 00002710		    cmp     eax, 10000				    ; compare product to 10000
 000000F6  7F 13		    jg      loop2Done					; jump to label2Done if product is greater than 10,000
 000000F8  80 B8 000000AB R	    cmp     [array + eax], 0		    ; comapare the value at the current array index to zero
	   00
 000000FF  75 07		    jnz     increment_index			    ; if it does not equal zero do nothing and jump to increment index
 00000101  C6 80 000000AB R	    mov     [array + eax], 1			; otherwise place 1 in the index because the number is composite
	   01

 00000108			increment_index:
				    ; counter logic
 00000108  41			    inc     ecx							; increment 2nd counter
 00000109  EB E2		    jmp     loop2						; loop back to beginning of loop

 0000010B			loop2Done:
 0000010B  43			    inc     ebx                         ; increment outer loop
 0000010C  B9 00000002		    mov     ecx, 2                      ; reset 2nd counter to 2
 00000111  EB D2		    jmp     loop1			            ; jump to the begining of first loop

 00000113			quit:
 00000113  C3			    ret			
 00000114			GenPrimes ENDP
				END 
Microsoft (R) Macro Assembler Version 10.00.30319.01	    10/24/16 17:45:19
example.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000027BB Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000114 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

GenPrimes  . . . . . . . . . . .	P Near	 000000DB _TEXT	Length= 00000039 Public
  loop1  . . . . . . . . . . . .	L Near	 000000E5 _TEXT	
  loop2  . . . . . . . . . . . .	L Near	 000000ED _TEXT	
  increment_index  . . . . . . .	L Near	 00000108 _TEXT	
  loop2Done  . . . . . . . . . .	L Near	 0000010B _TEXT	
  quit . . . . . . . . . . . . .	L Near	 00000113 _TEXT	
_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000DB Public
  startCheck . . . . . . . . . .	L Near	 00000000 _TEXT	
  greaterThan  . . . . . . . . .	L Near	 00000046 _TEXT	
  endCheck . . . . . . . . . . .	L Near	 00000061 _TEXT	
  whileLoop  . . . . . . . . . .	L Near	 00000090 _TEXT	
  primeCheck . . . . . . . . . .	L Near	 0000009A _TEXT	
  printPrimes  . . . . . . . . .	L Near	 000000A1 _TEXT	
  endPrintLoop . . . . . . . . .	L Near	 000000D5 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
array  . . . . . . . . . . . . .	Byte	 000000AB _DATA	
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
emptyLbl . . . . . . . . . . . .	Byte	 0000006C _DATA	
errorLbl . . . . . . . . . . . .	Byte	 0000002D _DATA	
number1  . . . . . . . . . . . .	DWord	 00000000 _DATA	
number2  . . . . . . . . . . . .	DWord	 00000004 _DATA	
primesLbl  . . . . . . . . . . .	Byte	 0000005C _DATA	
primes . . . . . . . . . . . . .	Byte	 00000096 _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000008 _DATA	
string . . . . . . . . . . . . .	Byte	 0000006E _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
